kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.1/deploy/static/provider/aws/deploy.yaml


kubectl create configmap tcp-services -n ingress-nginx --from-literal=5432="default/postgres-service:5432"


kubectl patch svc ingress-nginx-controller -n ingress-nginx -p '{
  "metadata": {
    "annotations": {
      "service.beta.kubernetes.io/aws-load-balancer-type": "nlb",
      "service.beta.kubernetes.io/aws-load-balancer-backend-protocol": "tcp",
      "service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol": "tcp",
      "service.beta.kubernetes.io/aws-load-balancer-healthcheck-port": "80"
    }
  },
  "spec": {
    "ports": [
      {"name": "http","port": 80,"targetPort": 80},
      {"name": "https","port": 443,"targetPort": 443},
      {"name": "postgres","port": 5432,"targetPort": 5432}
    ]
  }
}'


kubectl rollout restart deployment ingress-nginx-controller -n ingress-nginx


kubectl get pods -n ingress-nginx -l app.kubernetes.io/component=controller
kubectl logs -n ingress-nginx -l app.kubernetes.io/component=controller


aws elbv2 describe-target-health --target-group-arn <TARGET_GROUP_ARN>


=================================================================================
‚öôÔ∏è Step 1: Create or Update the tcp-services ConfigMap
If you don‚Äôt already have one, create it:

kubectl -n ingress-nginx create configmap tcp-services \
  --from-literal="7687=default/postgres:5432"

Or if it already exists, patch it:

kubectl patch configmap tcp-services -n ingress-nginx \
  --type merge \
  -p '{"data":{"7687":"default/postgres:5432"}}'

‚öôÔ∏è Step 2: Patch the Ingress-NGINX Deployment
Make sure the controller has the TCP config enabled and exposes port 7687.

kubectl patch deployment ingress-nginx-controller -n ingress-nginx \
  --type='json' \
  -p='[
    {"op":"add","path":"/spec/template/spec/containers/0/args/-","value":"--tcp-services-configmap=$(POD_NAMESPACE)/tcp-services"},
    {"op":"add","path":"/spec/template/spec/containers/0/ports/-","value":{"name":"tcp-7687","containerPort":7687}}
  ]'

‚öôÔ∏è Step 3: Patch the Service (Expose Port 7687 on NLB)

kubectl patch service ingress-nginx-controller -n ingress-nginx \
  --type='json' \
  -p='[
    {"op":"add","path":"/spec/ports/-","value":{"name":"tcp-7687","port":7687,"targetPort":"tcp-7687","protocol":"TCP"}}
  ]'

If your service already has annotations for NLB (like aws-load-balancer-type), you don‚Äôt need to modify them.
=============================
üõ†Ô∏è Patch command

kubectl patch service ingress-nginx-controller -n ingress-nginx \
  --type merge \
  -p '{
    "metadata": {
      "annotations": {
        "service.beta.kubernetes.io/aws-load-balancer-type": "nlb",
        "service.beta.kubernetes.io/aws-load-balancer-internal": "true",
        "service.beta.kubernetes.io/aws-load-balancer-security-groups": "<YOUR_NLB_SG_ID>"
      }
    }
  }'

======================
Verification

kubectl get svc ingress-nginx-controller -n ingress-nginx -o wide
kubectl describe svc ingress-nginx-controller -n ingress-nginx | grep "LoadBalancer"


kubectl get configmap tcp-services -n ingress-nginx -o yaml
kubectl get deploy ingress-nginx-controller -n ingress-nginx -o yaml | grep 7687
kubectl get svc ingress-nginx-controller -n ingress-nginx -o yaml | grep 7687

================================

Add Tags for Internal NLB (Private Subnets)

aws ec2 create-tags --resources <SUBNET_ID_1> <SUBNET_ID_2> \
  --tags Key=kubernetes.io/cluster/<CLUSTER_NAME>,Value=owned \
         Key=kubernetes.io/role/internal-elb,Value=1

üßæ 4. Verify Service After Fix
After adding the subnet tags, delete and recreate the Service (or just let the controller retry):

kubectl delete svc ingress-nginx-controller -n ingress-nginx
kubectl apply -f ingress-nginx-service.yaml

kubectl get svc -n ingress-nginx

NAME                      TYPE           CLUSTER-IP      EXTERNAL-IP
ingress-nginx-controller  LoadBalancer   10.x.x.x        internal-xxxx-NLB-xxxx.elb.amazonaws.com
==================
5. Optional: Restrict Subnets Manually (Annotation Method)

kubectl patch service ingress-nginx-controller -n ingress-nginx \
  --type merge \
  -p '{
    "metadata": {
      "annotations": {
        "service.beta.kubernetes.io/aws-load-balancer-type": "nlb",
        "service.beta.kubernetes.io/aws-load-balancer-internal": "true",
        "service.beta.kubernetes.io/aws-load-balancer-subnets": "subnet-abc123,subnet-def456",
        "service.beta.kubernetes.io/aws-load-balancer-security-groups": "<YOUR_NLB_SG_ID>"
      }
    }
  }'
=======================<>===========================
kubectl patch svc ingress-nginx-controller -n ingress-nginx --type='json' -p='[
  {
    "op": "add",
    "path": "/spec/ports/-",
    "value": {"name":"postgres-tcp","port":5432,"targetPort":5432}
  },
  {
    "op": "add",
    "path": "/spec/ports/-",
    "value": {"name":"custom-tcp","port":7683,"targetPort":7683}
  }
]'

# code
apiVersion: v1
kind: ConfigMap
metadata:
  name: tcp-services
  namespace: ingress-nginx
data:
  "5432": "default/postgres-service:5432"
  "7683": "default/other-service:7683"  # Replace 'other-service' with your actual service name

# patch for code
Option A ‚Äî one-line kubectl patch (fast, idempotent)

kubectl patch configmap tcp-services -n ingress-nginx --type=merge -p '{
  "data": {
    "5432": "default/postgres-service:5432",
    "7683": "default/other-service:7683"
  }
}'


Option B ‚Äî apply a small YAML (creates or replaces)

Save this to tcp-services-patch.yaml:

apiVersion: v1
kind: ConfigMap
metadata:
  name: tcp-services
  namespace: ingress-nginx
data:
  "5432": "default/postgres-service:5432"
  "7683": "default/other-service:7683"
